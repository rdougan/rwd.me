Ext.namespace("Ext.ux.form");Ext.ux.form.CodeMirror=Ext.extend(Ext.form.TextArea,{language:"txt",codeMirrorPath:null,initComponent:function(){if(this.codeMirrorPath===null){throw"Ext.ux.form.CodeMirror: codeMirrorPath required"}this.initialized=false;Ext.ux.form.CodeMirror.superclass.initComponent.apply(this,arguments);this.addEvents("initialize");this.on({resize:function(B,D,A){var C=Ext.select("."+this.id,true);if(C){D-=35;C.elements.forEach(function(E){E.setSize(D,A)})}},afterrender:function(){var C,A;switch(this.language.toLowerCase()){case"css":C="parsecss.js";A=this.codeMirrorPath+"/css/csscolors.css";break;case"js":C=["tokenizejavascript.js","parsejavascript.js"];A=this.codeMirrorPath+"/css/jscolors.css";break;case"php":C=["parsexml.js","parsecss.js","tokenizejavascript.js","parsejavascript.js","../contrib/php/js/tokenizephp.js","../contrib/php/js/parsephp.js","../contrib/php/js/parsephphtmlmixed.js"];A=[this.codeMirrorPath+"/css/xmlcolors.css",this.codeMirrorPath+"/css/jscolors.css",this.codeMirrorPath+"/css/csscolors.css",this.codeMirrorPath+"/contrib/php/css/phpcolors.css"];break;case"htm":case"html":case"xml":C="parsexml.js";A="xmlcolors.css";break;default:C="parsedummy.js";A="";break}var B=this;B.codeEditor=new CodeMirror.fromTextArea(B.id,{parserfile:C,stylesheet:A,path:B.codeMirrorPath+"/js/",textWrapping:true,lineNumbers:true,iframeClass:"codemirror-iframe "+B.id,content:B.initialConfig.value,height:"400",initCallback:function(){B.initialized=true;B.fireEvent("initialize",true)}})}})},getValue:function(){if(this.initialized){return this.codeEditor.getCode()}return this.initialConfig.value},setValue:function(A){if(this.initialized){this.codeEditor.setCode(A)}else{var B=new Ext.util.DelayedTask(function(){this.setValue(A)},this);B.delay(500)}},validate:function(){this.getValue();Ext.ux.form.CodeMirror.superclass.validate.apply(this,arguments)}});Ext.reg("ux-codemirror",Ext.ux.form.CodeMirror);(function(){var A=Ext.Component.prototype.destroy,B=Ext.Component.prototype.initComponent;Ext.override(Ext.Component,{attachControllerListeners:function(F){var G=F===true?"un":"on";if(this.controllerListeners==undefined){return}for(var E in this.controllerListeners){var C=ExtMVC.getController(E),D=this.controllerListeners[E];for(eventName in D){C[G](eventName,D[eventName],this)}}},detachControllerListeners:function(){this.attachControllerListeners(true)},initComponent:function(){B.apply(this,arguments);this.attachControllerListeners()},destroy:function(){this.detachControllerListeners();A.apply(this,arguments)}})})();ExtMVC.App.define({name:"RWD",launch:function(){Ext.QuickTips.init();this.menu=ExtMVC.buildView("layout","menu",{region:"west",width:240,listeners:{scope:this,click:function(B){var A=B.attributes;if(A.controller!=undefined){ExtMVC.dispatch({controller:A.controller,action:A.action})}}}});this.main=new Ext.TabPanel({region:"center",plain:true,cls:"mainPanel",enableTabScroll:true,listeners:{tabchange:function(B,A){}}});this.viewport=new Ext.Viewport({layout:"border",items:[this.menu,this.main]});this.fireEvent("launched");ExtMVC.dispatch("posts","index");Ext.get("loading").remove();Ext.get("loading-mask").fadeOut({remove:true})}});ExtMVC.router.Router.defineRoutes=function(A){A.connect(":controller/:action");A.connect(":controller/:action/:id");A.root({controller:"posts",action:"index"})};ExtMVC.registerModel("Post",{fields:[{name:"id",type:"float",virtual:true},{name:"title",type:"string"},{name:"body",type:"string"},{name:"published",type:"boolean"},{name:"created_at",type:"date",virtual:true},{name:"updated_at",type:"date",virtual:true}]});ExtMVC.registerModel("Message",{fields:[{name:"id",type:"float",virtual:true},{name:"name",type:"string"},{name:"email",type:"string"},{name:"body",type:"string"},{name:"created_at",type:"date",virtual:true},{name:"updated_at",type:"date",virtual:true}]});ExtMVC.registerController("application",{extend:"controller"});ExtMVC.registerController("index",{index:function(){this.render("index")}});ExtMVC.registerController("posts",{extend:"crud",model:ExtMVC.getModel("Post")});ExtMVC.registerController("messages",{extend:"crud",model:ExtMVC.getModel("Message")});ExtMVC.registerView("posts","index",{xtype:"scaffold_grid",constructor:function(A){A=A||{};Ext.applyIf(A,{store:ExtMVC.getModel("Post").find({},{autoLoad:false}),model:ExtMVC.getModel("Post"),controllerListeners:{posts:{create:this.refresh,update:this.refresh,"delete":this.refresh}}});ExtMVC.getView("scaffold","index").prototype.constructor.call(this,A);this.on("activate",this.refresh,this)},refresh:function(){this.store.reload()},buildColumns:function(){return[{dataIndex:"id",header:"#",sortable:true},{id:"title",dataIndex:"title",header:"Title",sortable:true},{header:"Published",dataIndex:"published",sortable:true},{header:"Created At",dataIndex:"created_at",sortable:true,renderer:Ext.util.Format.dateRenderer("m/d/Y H:s")}]}});ExtMVC.registerView("posts","new",{xtype:"formwindow",title:"New Post",height:450,width:700,border:false,resizable:false,constructor:function(A){A=A||{};Ext.applyIf(A,{model:ExtMVC.getModel("Post")});ExtMVC.getView("extmvc","formwindow").prototype.constructor.call(this,A)},initComponent:function(){ExtMVC.getView("extmvc","formwindow").prototype.initComponent.apply(this,arguments);ExtMVC.getController("posts").on({scope:this,create:function(){this.destroy()},"create-failed":function(){this.el.unmask()}})},buildForm:function(){return new Ext.form.FormPanel({items:ExtMVC.getFields("posts"),bodyStyle:"padding:10px 5px 10px 10px",defaults:{xtype:"textfield",anchor:"-5"}})}});ExtMVC.registerView("posts","edit",{xtype:"formwindow",title:"Edit Post",height:450,width:700,border:false,resizable:false,constructor:function(A){A=A||{};Ext.applyIf(A,{model:ExtMVC.getModel("Post")});ExtMVC.getView("extmvc","formwindow").prototype.constructor.call(this,A)},initComponent:function(){ExtMVC.getView("extmvc","formwindow").prototype.initComponent.apply(this,arguments);ExtMVC.getController("posts").on({scope:this,update:function(){this.destroy()},"update-failed":function(){this.el.unmask()}})},buildForm:function(){return new Ext.form.FormPanel({items:ExtMVC.getFields("posts"),bodyStyle:"padding:10px 5px 10px 10px",defaults:{xtype:"textfield",anchor:"-5"}})}});ExtMVC.registerFields("posts",[{xtype:"textfield",fieldLabel:"Title",name:"title"},{xtype:"combo",forceSelection:true,editable:false,mode:"local",triggerAction:"all",fieldLabel:"Published",name:"published",displayField:"value",store:new Ext.data.SimpleStore({fields:["value"],data:[[true],[false]]})},{xtype:"textarea",fieldLabel:"Body",height:310,name:"body"}]);ExtMVC.registerView("messages","index",{xtype:"scaffold_grid",constructor:function(A){A=A||{};Ext.applyIf(A,{store:ExtMVC.getModel("Message").find({},{autoLoad:false}),model:ExtMVC.getModel("Message"),controllerListeners:{messages:{create:this.refresh,update:this.refresh,destroy:this.refresh}}});ExtMVC.getView("scaffold","index").prototype.constructor.call(this,A);this.on("activate",this.refresh,this)},refresh:function(){this.store.reload()},buildColumns:function(){return[{dataIndex:"id",header:"#",sortable:true},{dataIndex:"name",header:"Name",sortable:true},{header:"Email",dataIndex:"email",sortable:true},{header:"Created At",dataIndex:"created_at",sortable:true,renderer:Ext.util.Format.dateRenderer("m/d/Y H:s")}]}});ExtMVC.registerView("layout","menu",{xtype:"treepanel",title:"Menu",collapsible:true,constructor:function(A){A=A||{};Ext.applyIf(A,{root:{text:"Menu",id:"menu",nodeType:"async",expanded:true,children:[{text:"Posts",expanded:true,controller:"posts",action:"index",children:[]},{text:"Messages",expanded:true,controller:"messages",action:"index",children:[]}]}});Ext.tree.TreePanel.prototype.constructor.call(this,A)}});ExtMVC.registerView("index","index",{xtype:"panel",initComponent:function(){Ext.applyIf(this,{title:"Welcome to Ext MVC",html:"This is the default template, which is found in app/views/index/Index.js.  This is being displayed because your config/routes.js file has a map.root setting telling it to use the Index view of the IndexController"});Ext.Panel.prototype.initComponent.apply(this,arguments)}});